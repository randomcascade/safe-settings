{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "properties": {
    "repositories": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the repository."
            },
            "description": {
              "type": "string",
              "description": "A short description of the repository."
            },
            "homepage": {
              "type": "string",
              "description": "A URL with more information about the repository."
            },
            "private": {
              "type": "boolean",
              "description": "Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
              "default": false
            },
            "visibility": {
              "type": "string",
              "description": "The visibility of the repository.",
              "enum": [
                "public",
                "private"
              ]
            },
            "security_and_analysis": {
              "type": "object",
              "description": "Specify which security and analysis features to enable or disable for the repository.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nFor example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:\n`{ \"security_and_analysis\": {\"advanced_security\": { \"status\": \"enabled\" } } }`.\n\nYou can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.",
              "nullable": true,
              "properties": {
                "advanced_security": {
                  "type": "object",
                  "description": "Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see \"[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).\"",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Can be `enabled` or `disabled`."
                    }
                  }
                },
                "secret_scanning": {
                  "type": "object",
                  "description": "Use the `status` property to enable or disable secret scanning for this repository. For more information, see \"[About secret scanning](/code-security/secret-security/about-secret-scanning).\"",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Can be `enabled` or `disabled`."
                    }
                  }
                },
                "secret_scanning_push_protection": {
                  "type": "object",
                  "description": "Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see \"[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning).\"",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Can be `enabled` or `disabled`."
                    }
                  }
                },
                "secret_scanning_non_provider_patterns": {
                  "type": "object",
                  "description": "Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see \"[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets).\"",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Can be `enabled` or `disabled`."
                    }
                  }
                }
              }
            },
            "has_issues": {
              "type": "boolean",
              "description": "Either `true` to enable issues for this repository or `false` to disable them.",
              "default": true
            },
            "has_projects": {
              "type": "boolean",
              "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
              "default": true
            },
            "has_wiki": {
              "type": "boolean",
              "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
              "default": true
            },
            "is_template": {
              "type": "boolean",
              "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
              "default": false
            },
            "default_branch": {
              "type": "string",
              "description": "Updates the default branch for this repository."
            },
            "allow_squash_merge": {
              "type": "boolean",
              "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
              "default": true
            },
            "allow_merge_commit": {
              "type": "boolean",
              "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
              "default": true
            },
            "allow_rebase_merge": {
              "type": "boolean",
              "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
              "default": true
            },
            "allow_auto_merge": {
              "type": "boolean",
              "description": "Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.",
              "default": false
            },
            "delete_branch_on_merge": {
              "type": "boolean",
              "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
              "default": false
            },
            "allow_update_branch": {
              "type": "boolean",
              "description": "Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.",
              "default": false
            },
            "use_squash_pr_title_as_default": {
              "type": "boolean",
              "description": "Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
              "default": false,
              "deprecated": true
            },
            "squash_merge_commit_title": {
              "type": "string",
              "enum": [
                "PR_TITLE",
                "COMMIT_OR_PR_TITLE"
              ],
              "description": "Required when using `squash_merge_commit_message`.\n\nThe default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
            },
            "squash_merge_commit_message": {
              "type": "string",
              "enum": [
                "PR_BODY",
                "COMMIT_MESSAGES",
                "BLANK"
              ],
              "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
            },
            "merge_commit_title": {
              "type": "string",
              "enum": [
                "PR_TITLE",
                "MERGE_MESSAGE"
              ],
              "description": "Required when using `merge_commit_message`.\n\nThe default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
            },
            "merge_commit_message": {
              "type": "string",
              "enum": [
                "PR_BODY",
                "PR_TITLE",
                "BLANK"
              ],
              "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
            },
            "archived": {
              "type": "boolean",
              "description": "Whether to archive this repository. `false` will unarchive a previously archived repository.",
              "default": false
            },
            "allow_forking": {
              "type": "boolean",
              "description": "Either `true` to allow private forks, or `false` to prevent private forks.",
              "default": false
            },
            "web_commit_signoff_required": {
              "type": "boolean",
              "description": "Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.",
              "default": false
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "auto_init": {
              "description": "Create an initial commit with empty README. Keep this set to true in most cases since many of the policies below cannot be implemented on bare repos",
              "type": "boolean"
            },
            "gitignore_template": {
              "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, 'Haskell'.",
              "type": "string"
            },
            "license_template": {
              "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, 'mit' or 'mpl-2.0'.",
              "type": "string"
            },
            "topics": {
              "description": "A list of topics to set on the repository",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "security": {
              "description": "Settings for Code security and analysis",
              "type": "object",
              "properties": {
                "enableVulnerabilityAlerts": {
                  "type": "boolean"
                },
                "enableAutomatedSecurityFixes": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      ]
    },
    "labels": {
      "description": "Labels: define labels for Issues and Pull Requests",
      "type": "object",
      "properties": {
        "include": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "color": {
                "description": "The hexadecimal color code for the label. If including a `#`, make sure to wrap it with quotes!",
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "oldname": {
                "description": "Include the old name to rename an existing label",
                "type": "string"
              }
            }
          }
        },
        "exclude": {
          "description": "Ignore any labels matching these regexes (don't delete them)",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "milestones": {
      "description": "Milestones: define milestones for Issues and Pull Requests",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "description": "The state of the milestone. Either `open` or `closed`",
            "type": "string"
          }
        }
      }
    },
    "collaborators": {
      "description": "Collaborators: give specific users access to any repository.",
      "type": "array",
      "items": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "permission": {
                "type": "string",
                "description": "The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.",
                "default": "push"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "exclude": {
                "description": "You can exclude a list of repos for this collaborator and all repos except these repos would have this collaborator",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "include": {
                "description": "You can include a list of repos for this collaborator and only those repos would have this collaborator",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "teams": {
      "description": "Teams",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the team."
          },
          "description": {
            "type": "string",
            "description": "The description of the team."
          },
          "maintainers": {
            "type": "array",
            "description": "List GitHub IDs for organization members who will become team maintainers.",
            "items": {
              "type": "string"
            }
          },
          "repo_names": {
            "type": "array",
            "description": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
            "items": {
              "type": "string"
            }
          },
          "privacy": {
            "type": "string",
            "description": "The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.  \nDefault for child team: `closed`",
            "enum": [
              "secret",
              "closed"
            ]
          },
          "notification_setting": {
            "type": "string",
            "description": "The notification setting the team has chosen. The options are:  \n * `notifications_enabled` - team members receive notifications when the team is @mentioned.  \n * `notifications_disabled` - no one receives notifications.  \nDefault: `notifications_enabled`",
            "enum": [
              "notifications_enabled",
              "notifications_disabled"
            ]
          },
          "permission": {
            "type": "string",
            "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified.",
            "enum": [
              "pull",
              "push"
            ],
            "default": "pull"
          },
          "parent_team_id": {
            "type": "integer",
            "description": "The ID of a team to set as the parent team."
          }
        },
        "required": [
          "name"
        ]
      }
    },
    "branches": {
      "description": "Branch protection rules",
      "type": "array",
      "items": {
        "properties": {
          "name": {
            "description": "If the name of the branch value is specified as `default`, then the app will create a branch protection rule to apply against the default branch in the repo",
            "type": "string"
          },
          "protection": {
            "type": "object",
            "properties": {
              "required_status_checks": {
                "type": "object",
                "description": "Require status checks to pass before merging. Set to `null` to disable.",
                "nullable": true,
                "properties": {
                  "strict": {
                    "type": "boolean",
                    "description": "Require branches to be up to date before merging."
                  },
                  "contexts": {
                    "type": "array",
                    "deprecated": true,
                    "description": "**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "checks": {
                    "type": "array",
                    "description": "The list of status checks to require in order to merge into this branch.",
                    "items": {
                      "type": "object",
                      "required": [
                        "context"
                      ],
                      "properties": {
                        "context": {
                          "type": "string",
                          "description": "The name of the required check"
                        },
                        "app_id": {
                          "type": "integer",
                          "description": "The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status."
                        }
                      }
                    }
                  }
                },
                "required": [
                  "strict",
                  "contexts"
                ]
              },
              "enforce_admins": {
                "type": "boolean",
                "description": "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.",
                "nullable": true
              },
              "required_pull_request_reviews": {
                "type": "object",
                "description": "Require at least one approving review on a pull request, before merging. Set to `null` to disable.",
                "nullable": true,
                "properties": {
                  "dismissal_restrictions": {
                    "type": "object",
                    "description": "Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
                    "properties": {
                      "users": {
                        "type": "array",
                        "description": "The list of user `login`s with dismissal access",
                        "items": {
                          "type": "string"
                        }
                      },
                      "teams": {
                        "type": "array",
                        "description": "The list of team `slug`s with dismissal access",
                        "items": {
                          "type": "string"
                        }
                      },
                      "apps": {
                        "type": "array",
                        "description": "The list of app `slug`s with dismissal access",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "dismiss_stale_reviews": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit."
                  },
                  "require_code_owner_reviews": {
                    "type": "boolean",
                    "description": "Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them."
                  },
                  "required_approving_review_count": {
                    "type": "integer",
                    "description": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers."
                  },
                  "require_last_push_approval": {
                    "type": "boolean",
                    "description": "Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.",
                    "default": false
                  },
                  "bypass_pull_request_allowances": {
                    "type": "object",
                    "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
                    "properties": {
                      "users": {
                        "type": "array",
                        "description": "The list of user `login`s allowed to bypass pull request requirements.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "teams": {
                        "type": "array",
                        "description": "The list of team `slug`s allowed to bypass pull request requirements.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "apps": {
                        "type": "array",
                        "description": "The list of app `slug`s allowed to bypass pull request requirements.",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "restrictions": {
                "type": "object",
                "description": "Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.",
                "nullable": true,
                "properties": {
                  "users": {
                    "type": "array",
                    "description": "The list of user `login`s with push access",
                    "items": {
                      "type": "string"
                    }
                  },
                  "teams": {
                    "type": "array",
                    "description": "The list of team `slug`s with push access",
                    "items": {
                      "type": "string"
                    }
                  },
                  "apps": {
                    "type": "array",
                    "description": "The list of app `slug`s with push access",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "users",
                  "teams"
                ]
              },
              "required_linear_history": {
                "type": "boolean",
                "description": "Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation."
              },
              "allow_force_pushes": {
                "type": "boolean",
                "description": "Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\"",
                "nullable": true
              },
              "allow_deletions": {
                "type": "boolean",
                "description": "Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation."
              },
              "block_creations": {
                "type": "boolean",
                "description": "If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`."
              },
              "required_conversation_resolution": {
                "type": "boolean",
                "description": "Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`."
              },
              "lock_branch": {
                "type": "boolean",
                "description": "Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.",
                "default": false
              },
              "allow_fork_syncing": {
                "type": "boolean",
                "description": "Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.",
                "default": false
              }
            },
            "required": [
              "required_status_checks",
              "enforce_admins",
              "required_pull_request_reviews",
              "restrictions"
            ]
          }
        }
      }
    },
    "custom_properties": {
      "description": "Custom properties",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      }
    },
    "autolinks": {
      "description": "Autolinks",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key_prefix": {
            "type": "string",
            "description": "This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit."
          },
          "url_template": {
            "type": "string",
            "description": "The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`."
          },
          "is_alphanumeric": {
            "type": "boolean",
            "default": true,
            "description": "Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters."
          }
        },
        "required": [
          "key_prefix",
          "url_template"
        ]
      }
    },
    "validator": {
      "description": "Repository name validation",
      "type": "object",
      "properties": {
        "pattern": {
          "type": "string"
        }
      }
    },
    "rulesets": {
      "description": "Rulesets",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the ruleset."
          },
          "target": {
            "type": "string",
            "description": "The target of the ruleset",
            "enum": [
              "branch",
              "tag",
              "push"
            ],
            "default": "branch"
          },
          "enforcement": {
            "type": "string",
            "description": "The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).",
            "enum": [
              "disabled",
              "active",
              "evaluate"
            ]
          },
          "bypass_actors": {
            "type": "array",
            "description": "The actors that can bypass the rules in this ruleset",
            "items": {
              "title": "Repository Ruleset Bypass Actor",
              "type": "object",
              "description": "An actor that can bypass rules in a ruleset",
              "required": [
                "actor_type"
              ],
              "properties": {
                "actor_id": {
                  "type": "integer",
                  "nullable": true,
                  "description": "The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories."
                },
                "actor_type": {
                  "type": "string",
                  "enum": [
                    "Integration",
                    "OrganizationAdmin",
                    "RepositoryRole",
                    "Team",
                    "DeployKey"
                  ],
                  "description": "The type of actor that can bypass a ruleset."
                },
                "bypass_mode": {
                  "type": "string",
                  "description": "When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.",
                  "enum": [
                    "always",
                    "pull_request"
                  ],
                  "default": "always"
                }
              }
            }
          },
          "conditions": {
            "title": "Organization ruleset conditions",
            "type": "object",
            "description": "Conditions for an organization ruleset.\nThe branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.\nThe push rulesets conditions object does not require the `ref_name` property.",
            "oneOf": [
              {
                "type": "object",
                "title": "repository_name_and_ref_name",
                "description": "Conditions to target repositories by name and refs by name",
                "allOf": [
                  {
                    "title": "Repository ruleset conditions for ref names",
                    "type": "object",
                    "description": "Parameters for a repository ruleset ref name condition",
                    "properties": {
                      "ref_name": {
                        "type": "object",
                        "properties": {
                          "include": {
                            "type": "array",
                            "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "exclude": {
                            "type": "array",
                            "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "title": "Repository ruleset conditions for repository names",
                    "type": "object",
                    "description": "Parameters for a repository name condition",
                    "properties": {
                      "repository_name": {
                        "type": "object",
                        "properties": {
                          "include": {
                            "type": "array",
                            "description": "Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "exclude": {
                            "type": "array",
                            "description": "Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "protected": {
                            "type": "boolean",
                            "description": "Whether renaming of target repositories is prevented."
                          }
                        }
                      }
                    },
                    "required": [
                      "repository_name"
                    ]
                  }
                ]
              },
              {
                "type": "object",
                "title": "repository_id_and_ref_name",
                "description": "Conditions to target repositories by id and refs by name",
                "allOf": [
                  {
                    "title": "Repository ruleset conditions for ref names",
                    "type": "object",
                    "description": "Parameters for a repository ruleset ref name condition",
                    "properties": {
                      "ref_name": {
                        "type": "object",
                        "properties": {
                          "include": {
                            "type": "array",
                            "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "exclude": {
                            "type": "array",
                            "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "title": "Repository ruleset conditions for repository IDs",
                    "type": "object",
                    "description": "Parameters for a repository ID condition",
                    "properties": {
                      "repository_id": {
                        "type": "object",
                        "properties": {
                          "repository_ids": {
                            "type": "array",
                            "description": "The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.",
                            "items": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "repository_id"
                    ]
                  }
                ]
              },
              {
                "type": "object",
                "title": "repository_property_and_ref_name",
                "description": "Conditions to target repositories by property and refs by name",
                "allOf": [
                  {
                    "title": "Repository ruleset conditions for ref names",
                    "type": "object",
                    "description": "Parameters for a repository ruleset ref name condition",
                    "properties": {
                      "ref_name": {
                        "type": "object",
                        "properties": {
                          "include": {
                            "type": "array",
                            "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "exclude": {
                            "type": "array",
                            "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "title": "Repository ruleset conditions for repository properties",
                    "type": "object",
                    "description": "Parameters for a repository property condition",
                    "properties": {
                      "repository_property": {
                        "type": "object",
                        "properties": {
                          "include": {
                            "type": "array",
                            "description": "The repository properties and values to include. All of these properties must match for the condition to pass.",
                            "items": {
                              "title": "Repository ruleset property targeting definition",
                              "type": "object",
                              "description": "Parameters for a targeting a repository property",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the repository property to target"
                                },
                                "property_values": {
                                  "type": "array",
                                  "description": "The values to match for the repository property",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "source": {
                                  "type": "string",
                                  "description": "The source of the repository property. Defaults to 'custom' if not specified.",
                                  "enum": [
                                    "custom",
                                    "system"
                                  ]
                                }
                              },
                              "required": [
                                "name",
                                "property_values"
                              ]
                            }
                          },
                          "exclude": {
                            "type": "array",
                            "description": "The repository properties and values to exclude. The condition will not pass if any of these properties match.",
                            "items": {
                              "title": "Repository ruleset property targeting definition",
                              "type": "object",
                              "description": "Parameters for a targeting a repository property",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the repository property to target"
                                },
                                "property_values": {
                                  "type": "array",
                                  "description": "The values to match for the repository property",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "source": {
                                  "type": "string",
                                  "description": "The source of the repository property. Defaults to 'custom' if not specified.",
                                  "enum": [
                                    "custom",
                                    "system"
                                  ]
                                }
                              },
                              "required": [
                                "name",
                                "property_values"
                              ]
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "repository_property"
                    ]
                  }
                ]
              }
            ]
          },
          "rules": {
            "type": "array",
            "description": "An array of rules within the ruleset.",
            "items": {
              "title": "Repository Rule",
              "type": "object",
              "description": "A repository rule.",
              "oneOf": [
                {
                  "title": "creation",
                  "description": "Only allow users with bypass permission to create matching refs.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "creation"
                      ]
                    }
                  }
                },
                {
                  "title": "update",
                  "description": "Only allow users with bypass permission to update matching refs.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "update"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "update_allows_fetch_and_merge": {
                          "type": "boolean",
                          "description": "Branch can pull changes from its upstream repository"
                        }
                      },
                      "required": [
                        "update_allows_fetch_and_merge"
                      ]
                    }
                  }
                },
                {
                  "title": "deletion",
                  "description": "Only allow users with bypass permissions to delete matching refs.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "deletion"
                      ]
                    }
                  }
                },
                {
                  "title": "required_linear_history",
                  "description": "Prevent merge commits from being pushed to matching refs.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "required_linear_history"
                      ]
                    }
                  }
                },
                {
                  "title": "merge_queue",
                  "description": "Merges must be performed via a merge queue.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "merge_queue"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "check_response_timeout_minutes": {
                          "type": "integer",
                          "description": "Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed",
                          "minimum": 1,
                          "maximum": 360
                        },
                        "grouping_strategy": {
                          "type": "string",
                          "description": "When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.",
                          "enum": [
                            "ALLGREEN",
                            "HEADGREEN"
                          ]
                        },
                        "max_entries_to_build": {
                          "type": "integer",
                          "description": "Limit the number of queued pull requests requesting checks and workflow runs at the same time.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "max_entries_to_merge": {
                          "type": "integer",
                          "description": "The maximum number of PRs that will be merged together in a group.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "merge_method": {
                          "type": "string",
                          "description": "Method to use when merging changes from queued pull requests.",
                          "enum": [
                            "MERGE",
                            "SQUASH",
                            "REBASE"
                          ]
                        },
                        "min_entries_to_merge": {
                          "type": "integer",
                          "description": "The minimum number of PRs that will be merged together in a group.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "min_entries_to_merge_wait_minutes": {
                          "type": "integer",
                          "description": "The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.",
                          "minimum": 0,
                          "maximum": 360
                        }
                      },
                      "required": [
                        "check_response_timeout_minutes",
                        "grouping_strategy",
                        "max_entries_to_build",
                        "max_entries_to_merge",
                        "merge_method",
                        "min_entries_to_merge",
                        "min_entries_to_merge_wait_minutes"
                      ]
                    }
                  }
                },
                {
                  "title": "required_deployments",
                  "description": "Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "required_deployments"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "required_deployment_environments": {
                          "type": "array",
                          "description": "The environments that must be successfully deployed to before branches can be merged.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "required_deployment_environments"
                      ]
                    }
                  }
                },
                {
                  "title": "required_signatures",
                  "description": "Commits pushed to matching refs must have verified signatures.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "required_signatures"
                      ]
                    }
                  }
                },
                {
                  "title": "pull_request",
                  "description": "Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "pull_request"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "dismiss_stale_reviews_on_push": {
                          "type": "boolean",
                          "description": "New, reviewable commits pushed will dismiss previous pull request review approvals."
                        },
                        "require_code_owner_review": {
                          "type": "boolean",
                          "description": "Require an approving review in pull requests that modify files that have a designated code owner."
                        },
                        "require_last_push_approval": {
                          "type": "boolean",
                          "description": "Whether the most recent reviewable push must be approved by someone other than the person who pushed it."
                        },
                        "required_approving_review_count": {
                          "type": "integer",
                          "description": "The number of approving reviews that are required before a pull request can be merged.",
                          "minimum": 0,
                          "maximum": 10
                        },
                        "required_review_thread_resolution": {
                          "type": "boolean",
                          "description": "All conversations on code must be resolved before a pull request can be merged."
                        }
                      },
                      "required": [
                        "dismiss_stale_reviews_on_push",
                        "require_code_owner_review",
                        "require_last_push_approval",
                        "required_approving_review_count",
                        "required_review_thread_resolution"
                      ]
                    }
                  }
                },
                {
                  "title": "required_status_checks",
                  "description": "Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "required_status_checks"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "do_not_enforce_on_create": {
                          "type": "boolean",
                          "description": "Allow repositories and branches to be created if a check would otherwise prohibit it."
                        },
                        "required_status_checks": {
                          "type": "array",
                          "description": "Status checks that are required.",
                          "items": {
                            "title": "StatusCheckConfiguration",
                            "description": "Required status check",
                            "type": "object",
                            "properties": {
                              "context": {
                                "type": "string",
                                "description": "The status check context name that must be present on the commit."
                              },
                              "integration_id": {
                                "type": "integer",
                                "description": "The optional integration ID that this status check must originate from."
                              }
                            },
                            "required": [
                              "context"
                            ]
                          }
                        },
                        "strict_required_status_checks_policy": {
                          "type": "boolean",
                          "description": "Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled."
                        }
                      },
                      "required": [
                        "required_status_checks",
                        "strict_required_status_checks_policy"
                      ]
                    }
                  }
                },
                {
                  "title": "non_fast_forward",
                  "description": "Prevent users with push access from force pushing to refs.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "non_fast_forward"
                      ]
                    }
                  }
                },
                {
                  "title": "commit_message_pattern",
                  "description": "Parameters to be used for the commit_message_pattern rule",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "commit_message_pattern"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "How this rule will appear to users."
                        },
                        "negate": {
                          "type": "boolean",
                          "description": "If true, the rule will fail if the pattern matches."
                        },
                        "operator": {
                          "type": "string",
                          "description": "The operator to use for matching.",
                          "enum": [
                            "starts_with",
                            "ends_with",
                            "contains",
                            "regex"
                          ]
                        },
                        "pattern": {
                          "type": "string",
                          "description": "The pattern to match with."
                        }
                      },
                      "required": [
                        "operator",
                        "pattern"
                      ]
                    }
                  }
                },
                {
                  "title": "commit_author_email_pattern",
                  "description": "Parameters to be used for the commit_author_email_pattern rule",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "commit_author_email_pattern"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "How this rule will appear to users."
                        },
                        "negate": {
                          "type": "boolean",
                          "description": "If true, the rule will fail if the pattern matches."
                        },
                        "operator": {
                          "type": "string",
                          "description": "The operator to use for matching.",
                          "enum": [
                            "starts_with",
                            "ends_with",
                            "contains",
                            "regex"
                          ]
                        },
                        "pattern": {
                          "type": "string",
                          "description": "The pattern to match with."
                        }
                      },
                      "required": [
                        "operator",
                        "pattern"
                      ]
                    }
                  }
                },
                {
                  "title": "committer_email_pattern",
                  "description": "Parameters to be used for the committer_email_pattern rule",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "committer_email_pattern"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "How this rule will appear to users."
                        },
                        "negate": {
                          "type": "boolean",
                          "description": "If true, the rule will fail if the pattern matches."
                        },
                        "operator": {
                          "type": "string",
                          "description": "The operator to use for matching.",
                          "enum": [
                            "starts_with",
                            "ends_with",
                            "contains",
                            "regex"
                          ]
                        },
                        "pattern": {
                          "type": "string",
                          "description": "The pattern to match with."
                        }
                      },
                      "required": [
                        "operator",
                        "pattern"
                      ]
                    }
                  }
                },
                {
                  "title": "branch_name_pattern",
                  "description": "Parameters to be used for the branch_name_pattern rule",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "branch_name_pattern"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "How this rule will appear to users."
                        },
                        "negate": {
                          "type": "boolean",
                          "description": "If true, the rule will fail if the pattern matches."
                        },
                        "operator": {
                          "type": "string",
                          "description": "The operator to use for matching.",
                          "enum": [
                            "starts_with",
                            "ends_with",
                            "contains",
                            "regex"
                          ]
                        },
                        "pattern": {
                          "type": "string",
                          "description": "The pattern to match with."
                        }
                      },
                      "required": [
                        "operator",
                        "pattern"
                      ]
                    }
                  }
                },
                {
                  "title": "tag_name_pattern",
                  "description": "Parameters to be used for the tag_name_pattern rule",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "tag_name_pattern"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "How this rule will appear to users."
                        },
                        "negate": {
                          "type": "boolean",
                          "description": "If true, the rule will fail if the pattern matches."
                        },
                        "operator": {
                          "type": "string",
                          "description": "The operator to use for matching.",
                          "enum": [
                            "starts_with",
                            "ends_with",
                            "contains",
                            "regex"
                          ]
                        },
                        "pattern": {
                          "type": "string",
                          "description": "The pattern to match with."
                        }
                      },
                      "required": [
                        "operator",
                        "pattern"
                      ]
                    }
                  }
                },
                {
                  "title": "file_path_restriction",
                  "description": "Prevent commits that include changes in specified file paths from being pushed to the commit graph.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "file_path_restriction"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "restricted_file_paths": {
                          "type": "array",
                          "description": "The file paths that are restricted from being pushed to the commit graph.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "restricted_file_paths"
                      ]
                    }
                  }
                },
                {
                  "title": "max_file_path_length",
                  "description": "Prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "max_file_path_length"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "max_file_path_length": {
                          "type": "integer",
                          "description": "The maximum amount of characters allowed in file paths",
                          "minimum": 1,
                          "maximum": 256
                        }
                      },
                      "required": [
                        "max_file_path_length"
                      ]
                    }
                  }
                },
                {
                  "title": "file_extension_restriction",
                  "description": "Prevent commits that include files with specified file extensions from being pushed to the commit graph.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "file_extension_restriction"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "restricted_file_extensions": {
                          "type": "array",
                          "description": "The file extensions that are restricted from being pushed to the commit graph.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "restricted_file_extensions"
                      ]
                    }
                  }
                },
                {
                  "title": "max_file_size",
                  "description": "Prevent commits that exceed a specified file size limit from being pushed to the commit.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "max_file_size"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "max_file_size": {
                          "type": "integer",
                          "description": "The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).",
                          "minimum": 1,
                          "maximum": 100
                        }
                      },
                      "required": [
                        "max_file_size"
                      ]
                    }
                  }
                },
                {
                  "title": "workflows",
                  "description": "Require all changes made to a targeted branch to pass the specified workflows before they can be merged.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "workflows"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "do_not_enforce_on_create": {
                          "type": "boolean",
                          "description": "Allow repositories and branches to be created if a check would otherwise prohibit it."
                        },
                        "workflows": {
                          "type": "array",
                          "description": "Workflows that must pass for this rule to pass.",
                          "items": {
                            "title": "WorkflowFileReference",
                            "description": "A workflow that must run for this rule to pass",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The path to the workflow file"
                              },
                              "ref": {
                                "type": "string",
                                "description": "The ref (branch or tag) of the workflow file to use"
                              },
                              "repository_id": {
                                "type": "integer",
                                "description": "The ID of the repository where the workflow is defined"
                              },
                              "sha": {
                                "type": "string",
                                "description": "The commit SHA of the workflow file to use"
                              }
                            },
                            "required": [
                              "path",
                              "repository_id"
                            ]
                          }
                        }
                      },
                      "required": [
                        "workflows"
                      ]
                    }
                  }
                },
                {
                  "title": "code_scanning",
                  "description": "Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "code_scanning"
                      ]
                    },
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "code_scanning_tools": {
                          "type": "array",
                          "description": "Tools that must provide code scanning results for this rule to pass.",
                          "items": {
                            "title": "CodeScanningTool",
                            "description": "A tool that must provide code scanning results for this rule to pass.",
                            "type": "object",
                            "properties": {
                              "alerts_threshold": {
                                "type": "string",
                                "description": "The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"",
                                "enum": [
                                  "none",
                                  "errors",
                                  "errors_and_warnings",
                                  "all"
                                ]
                              },
                              "security_alerts_threshold": {
                                "type": "string",
                                "description": "The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"",
                                "enum": [
                                  "none",
                                  "critical",
                                  "high_or_higher",
                                  "medium_or_higher",
                                  "all"
                                ]
                              },
                              "tool": {
                                "type": "string",
                                "description": "The name of a code scanning tool"
                              }
                            },
                            "required": [
                              "alerts_threshold",
                              "security_alerts_threshold",
                              "tool"
                            ]
                          }
                        }
                      },
                      "required": [
                        "code_scanning_tools"
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        "required": [
          "name",
          "enforcement"
        ]
      }
    }
  }
}